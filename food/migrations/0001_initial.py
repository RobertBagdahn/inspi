# Generated by Django 5.0.6 on 2024-07-12 21:39

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Hint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=50)),
                ('description', models.CharField(blank=True, max_length=1000)),
                ('value', models.FloatField(default=1)),
                ('hint_level', models.CharField(choices=[('info', 'Info'), ('warn', 'Achtung'), ('error', 'Fehler')], default='info', max_length=10)),
                ('min_max', models.CharField(choices=[('max', 'Maximal'), ('min', 'Minimal')], default='min', max_length=10)),
                ('parameter', models.CharField(choices=[('weight_g', 'weight_g'), ('energy_kj', 'energy_kj'), ('protein_g', 'protein_g'), ('fat_g', 'fat_g'), ('fat_sat_g', 'fat_sat_g'), ('sugar_g', 'sugar_g'), ('sodium_mg', 'sodium_mg'), ('salt_g', 'salt_g'), ('carbohydrate_g', 'carbohydrate_g'), ('fibre_g', 'fibre_g'), ('nutri_points', 'nutri_points'), ('nutri_class', 'nutri_class')], default='weight_g', max_length=23)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('energy_kj', models.FloatField(blank=True, default=0, null=True)),
                ('protein_g', models.FloatField(blank=True, default=0, null=True)),
                ('fat_g', models.FloatField(blank=True, default=0, null=True)),
                ('fat_sat_g', models.FloatField(blank=True, default=0, null=True)),
                ('sugar_g', models.FloatField(blank=True, default=0, null=True)),
                ('sodium_mg', models.FloatField(blank=True, default=0, null=True)),
                ('salt_g', models.FloatField(blank=True, default=0, null=True)),
                ('fruit_factor', models.FloatField(blank=True, default=0, null=True)),
                ('carbohydrate_g', models.FloatField(blank=True, default=0, null=True)),
                ('fibre_g', models.FloatField(blank=True, default=0, null=True)),
                ('fructose_g', models.FloatField(blank=True, default=0, null=True)),
                ('lactose_g', models.FloatField(blank=True, default=0, null=True)),
                ('nutri_points_energy_kj', models.FloatField(default=0)),
                ('nutri_points_protein_g', models.FloatField(default=0)),
                ('nutri_points_fat_sat_g', models.FloatField(default=0)),
                ('nutri_points_sugar_g', models.FloatField(default=0)),
                ('nutri_points_salt_g', models.FloatField(default=0)),
                ('nutri_points_sodium_mg', models.FloatField(default=0)),
                ('nutri_points_fibre_g', models.FloatField(default=0)),
                ('name', models.CharField(max_length=40)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('physical_density', models.FloatField(default=1)),
                ('physical_viscosity', models.CharField(choices=[('solid', 'Essen'), ('beverage', 'Getränk')], default='solid', max_length=10)),
                ('fdc_id', models.IntegerField(blank=True, null=True)),
                ('major_class', models.CharField(choices=[('Baked Products', 'Backwaren'), ('Beef Products', 'Ringfleisch'), ('Beverages', 'Getränk'), ('Cereal Grains and Pasta', 'Nudeln und Getreide '), ('Dairy and Egg Products', 'Milch und Ei'), ('Fats and Oils', 'Fette und and Öl'), ('Finfish and Shellfish Products', 'Meeresfrücht und Fisch'), ('Fruits and Fruit Juices', 'Früchte'), ('Legumes and Legume Products', 'Hülsenfrüchte'), ('Nut and Seed Products', 'Nuß und Samen'), ('Pork Products', 'Schweinefleisch'), ('Poultry Products', 'Geflügel'), ('Sausages and Luncheon Meats', 'Wurst'), ('Soups, Sauces, and Gravies', 'Suppe oder Soße'), ('Spices and Herbs', 'Gewürz'), ('Sweets', 'Süßigkeit'), ('Vegetables and Vegetable Products', 'Gemüse'), ('undefined', 'unbekannt')], default='undefined', max_length=60)),
                ('nutri_points', models.IntegerField(blank=True, null=True)),
                ('nutri_class', models.FloatField(blank=True, null=True)),
                ('ndb_number', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MealDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('date', models.DateField(null=True)),
                ('max_day_part_factor', models.FloatField(default=1)),
                ('is_public', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MeasuringUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('quantity', models.FloatField()),
                ('unit', models.CharField(choices=[('ml', 'Millilitter'), ('g', 'Gramm')], default='g', max_length=2)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('quality', models.CharField(choices=[('own', 'Eigenmarke'), ('brand', 'Marke'), ('premium', 'Premium')], default='brand', max_length=10)),
                ('quantity', models.FloatField(default=0)),
                ('weight_package_g', models.FloatField(blank=True, default=0)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='PhysicalActivityLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(max_length=255)),
                ('value', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Retailer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('is_ingredient', models.BooleanField(default=True)),
                ('is_recipe', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TagCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('is_ingredient', models.BooleanField(default=True)),
                ('is_recipe', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, default='Hauptessen', max_length=255, null=True)),
                ('day_part_factor', models.FloatField(default=0.33)),
                ('meal_type', models.CharField(choices=[('breakfast', 'Frühstück'), ('lunch_warm', 'Menu (warm)'), ('lunch_cold', 'Menu (kalt)'), ('dessert', 'Nachtisch'), ('snack', 'Snack'), ('drink', 'Getränk')], default='lunch_warm', max_length=10)),
                ('time_start', models.TimeField(blank=True, null=True)),
                ('time_end', models.TimeField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False)),
                ('meal_day', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='food.mealday')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MealEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('event', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('norm_portions', models.IntegerField()),
                ('reserve_factor', models.FloatField(default=1.0)),
                ('is_public', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('created_by', models.ManyToManyField(blank=True, related_name='meal_event_created_by', to=settings.AUTH_USER_MODEL)),
                ('activity_factor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='food.physicalactivitylevel')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='mealday',
            name='meal_event',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='food.mealevent'),
        ),
        migrations.CreateModel(
            name='PollItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('item_1', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='package_item_1', to='food.package')),
                ('item_2', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='package_item_2', to='food.package')),
                ('winner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='package_winner', to='food.package')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Portion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('energy_kj', models.FloatField(blank=True, default=0, null=True)),
                ('protein_g', models.FloatField(blank=True, default=0, null=True)),
                ('fat_g', models.FloatField(blank=True, default=0, null=True)),
                ('fat_sat_g', models.FloatField(blank=True, default=0, null=True)),
                ('sugar_g', models.FloatField(blank=True, default=0, null=True)),
                ('sodium_mg', models.FloatField(blank=True, default=0, null=True)),
                ('salt_g', models.FloatField(blank=True, default=0, null=True)),
                ('fruit_factor', models.FloatField(blank=True, default=0, null=True)),
                ('carbohydrate_g', models.FloatField(blank=True, default=0, null=True)),
                ('fibre_g', models.FloatField(blank=True, default=0, null=True)),
                ('fructose_g', models.FloatField(blank=True, default=0, null=True)),
                ('lactose_g', models.FloatField(blank=True, default=0, null=True)),
                ('name', models.CharField(max_length=255)),
                ('quantity', models.FloatField(default=1)),
                ('rank', models.IntegerField(default=1)),
                ('weight_g', models.FloatField(blank=True, null=True)),
                ('ingredient', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='food.ingredient')),
                ('measuring_unit', models.ForeignKey(blank=True, default=3, null=True, on_delete=django.db.models.deletion.PROTECT, to='food.measuringunit')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='package',
            name='portion',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='food.portion'),
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('energy_kj', models.FloatField(blank=True, default=0, null=True)),
                ('protein_g', models.FloatField(blank=True, default=0, null=True)),
                ('fat_g', models.FloatField(blank=True, default=0, null=True)),
                ('fat_sat_g', models.FloatField(blank=True, default=0, null=True)),
                ('sugar_g', models.FloatField(blank=True, default=0, null=True)),
                ('sodium_mg', models.FloatField(blank=True, default=0, null=True)),
                ('salt_g', models.FloatField(blank=True, default=0, null=True)),
                ('fruit_factor', models.FloatField(blank=True, default=0, null=True)),
                ('carbohydrate_g', models.FloatField(blank=True, default=0, null=True)),
                ('fibre_g', models.FloatField(blank=True, default=0, null=True)),
                ('fructose_g', models.FloatField(blank=True, default=0, null=True)),
                ('lactose_g', models.FloatField(blank=True, default=0, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('meal_type', models.CharField(choices=[('breakfast', 'Frühstück'), ('lunch_warm', 'Menu (warm)'), ('lunch_cold', 'Menu (kalt)'), ('dessert', 'Nachtisch'), ('snack', 'Snack'), ('drink', 'Getränk')], default='lunch_warm', max_length=11)),
                ('status', models.CharField(choices=[('simulator', 'Simulator'), ('verified', 'Verified by Inspi'), ('user_conent', 'Benutzer erstellt'), ('user_public', 'Benutzer Öffentlich')], default='simulator', max_length=11)),
                ('nutri_class', models.FloatField(blank=True, null=True)),
                ('nutri_points', models.FloatField(blank=True, null=True)),
                ('weight_g', models.FloatField(default=1)),
                ('created_by', models.ManyToManyField(blank=True, related_name='recipe_created_by', to=settings.AUTH_USER_MODEL)),
                ('hints', models.ManyToManyField(blank=True, to='food.hint')),
                ('tags', models.ManyToManyField(blank=True, related_name='RecipeTags', to='food.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MealItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('factor', models.FloatField(default=1)),
                ('meal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='food.meal')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='food.recipe')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RecipeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('energy_kj', models.FloatField(blank=True, default=0, null=True)),
                ('protein_g', models.FloatField(blank=True, default=0, null=True)),
                ('fat_g', models.FloatField(blank=True, default=0, null=True)),
                ('fat_sat_g', models.FloatField(blank=True, default=0, null=True)),
                ('sugar_g', models.FloatField(blank=True, default=0, null=True)),
                ('sodium_mg', models.FloatField(blank=True, default=0, null=True)),
                ('salt_g', models.FloatField(blank=True, default=0, null=True)),
                ('fruit_factor', models.FloatField(blank=True, default=0, null=True)),
                ('carbohydrate_g', models.FloatField(blank=True, default=0, null=True)),
                ('fibre_g', models.FloatField(blank=True, default=0, null=True)),
                ('fructose_g', models.FloatField(blank=True, default=0, null=True)),
                ('lactose_g', models.FloatField(blank=True, default=0, null=True)),
                ('nutri_points_energy_kj', models.FloatField(default=0)),
                ('nutri_points_protein_g', models.FloatField(default=0)),
                ('nutri_points_fat_sat_g', models.FloatField(default=0)),
                ('nutri_points_sugar_g', models.FloatField(default=0)),
                ('nutri_points_salt_g', models.FloatField(default=0)),
                ('nutri_points_sodium_mg', models.FloatField(default=0)),
                ('nutri_points_fibre_g', models.FloatField(default=0)),
                ('quantity', models.FloatField(default=1)),
                ('weight_g', models.FloatField(blank=True, null=True)),
                ('weight_recipe_factor', models.FloatField(blank=True, null=True)),
                ('nutri_points', models.FloatField(blank=True, null=True)),
                ('nutri_class', models.FloatField(blank=True, null=True)),
                ('portion', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='recipe_items', to='food.portion')),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recipe_items', to='food.recipe')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('price_eur', models.FloatField()),
                ('price_per_kg', models.FloatField(default=1)),
                ('package', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='food.package')),
                ('retailer', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='food.retailer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='ingredient',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='IngredientTags', to='food.tag'),
        ),
        migrations.AddField(
            model_name='tag',
            name='tag_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='food.tagcategory'),
        ),
    ]
